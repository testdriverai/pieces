version: 6.0.1
session: 67f00511acbd9ccac373edf7
steps:
  - prompt: replace existing data with production data
    commands:
      - command: exec
        lang: pwsh
        code: |
            # Re-define variables for this command block
            $prodDataUrl = "https://github.com/testdriverai/assets-pieces/archive/HEAD.zip"
            $prodDataZipPath = "$env:USERPROFILE\Downloads\assets-pieces-HEAD.zip"
            $prodDataExtractedPath = "$env:USERPROFILE\AppData\Local\Mesh Intelligent Technologies, Inc\Pieces OS\com.pieces.os"
            
            # Stop pfd and pos before replacing
            Stop-Process -Name "pieces_for_x" -Force
            Stop-Process -Name "os_server" -Force

            # Download and setup production data
            Start-Sleep -Seconds 2
            
            try {
              Write-Host "$(Get-Date -Format G): Downloading Production Data..."
              Invoke-WebRequest -Uri $prodDataUrl -OutFile $prodDataZipPath -ErrorAction Stop
              
              $prodDataPath = "$prodDataExtractedPath\production"
              # Delete the existing production folder
              try {
                Write-Host "$(Get-Date -Format G): Deleting existing production folder..."
                if (Test-Path $prodDataPath) {
                    Remove-Item -Recurse -Force $prodDataPath
                }
              } catch {
                Write-Host "$(Get-Date -Format G): Failed to delete the existing production folder."
              }

              Expand-Archive -Path $prodDataZipPath -DestinationPath $prodDataExtractedPath -Force

              # Find the extracted folder and move production data
              $extractedFolders = Get-ChildItem -Path $prodDataExtractedPath -Directory
              if ($extractedFolders.Count -eq 1) {
                  $innerProductionPath = Join-Path $extractedFolders[0].FullName 'production'
                  if (Test-Path $innerProductionPath) {
                      Move-Item -Path $innerProductionPath -Destination $prodDataExtractedPath
                      Remove-Item -Recurse -Force $extractedFolders[0].FullName
                      Write-Host "Added testing production data to $prodDataExtractedPath"
                  } else {
                      Write-Host "Production folder not found in extracted content."
                  }
              } else {
                  Write-Host "Unexpected folder structure after extraction."
              }

              # Clean up zip file
              Remove-Item $prodDataZipPath -Recurse -Force
            } catch {
              Write-Host "$(Get-Date -Format G): Failed to download Production Data."
            }

      - command: exec
        lang: pwsh
        code: |
            # Start Pieces OS Server
            Write-Host "$(Get-Date -Format G): Attempting to start the Pieces OS Server..."
            $osServerExePath = "C:\Program Files\Pieces OS\os_server.exe"

            if (Test-Path $osServerExePath) {
              Start-Process -FilePath $osServerExePath -ArgumentList '/SILENT'
              Write-Host "$(Get-Date -Format G): Pieces OS Server started successfully."
            } else {
              Write-Host "$(Get-Date -Format G): Failed to find the Pieces OS Server executable."
            }

      - command: exec
        lang: pwsh
        code: |
            # Start Pieces Desktop Application
            Start-Sleep -Seconds 5
            
            Write-Host "$(Get-Date -Format G): Attempting to start the Pieces application..."
            $piecesExePath = "C:\Program Files\Pieces for Developers\pieces_for_x.exe"

            if (Test-Path $piecesExePath) {
              Start-Process -FilePath $piecesExePath
              Write-Host "$(Get-Date -Format G): Pieces application started successfully."
            } else {
              Write-Host "$(Get-Date -Format G): Failed to find the Pieces application executable."
            }

      - command: wait-for-text
        text: Pieces
        timeout: 60000
