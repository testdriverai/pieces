name: TestDriver.ai / Generate / Regressions

permissions:
  actions: read
  contents: write
  statuses: write
  pull-requests: write

on:
  workflow_call:
    inputs:
      website-url:
        type: string
        required: true
        description: The URL of the website to test
      base-branch:
        type: string
        required: true
        description: The branch name of the pull request
    secrets:
      key:
        required: true
        description: The TestDriver API key
      GH_TOKEN:
        required: true
        description: The GitHub token

jobs:
  gather-markdown-files:
    name: Setup Test Matrix (./testdriver/generate/*.md)
    runs-on: ubuntu-latest
    outputs:
      markdown_files: ${{ steps.markdown_list.outputs.files }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base-branch }}

      - name: Find all markdown files and extract filenames
        id: markdown_list
        run: |
          FILES=$(ls ./testdriver/generate/*.md)
          FILENAMES=$(basename -a $FILES | sed 's/\.md$//')
          FILES_JSON=$(echo "$FILENAMES" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=files::$FILES_JSON"

  test:
    name: Run Regressions - ${{ matrix.markdown }}
    needs: gather-markdown-files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        markdown: ${{ fromJson(needs.gather-markdown-files.outputs.markdown_files) }}
      fail-fast: false
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base-branch }}

      - name: Display filename being tested
        run: |
          echo "Running job for file: ${{ matrix.markdown }}.md"

      - name: Read file content into environment variable
        id: read_file
        run: |
          CONTENT=$(cat ./testdriver/generate/${{ matrix.markdown }}.md)
          echo "MARKDOWN_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Extract current branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - uses: testdriverai/action@main
        with:
          key: ${{ secrets.key }}
          prompt: |
            ${{ env.MARKDOWN_CONTENT }}  # Use the content of the file from the environment
            1. /summarize
          prerun: |
            # Define variables
            $osInstallerUrl = "https://builds.pieces.app/stages/production/os_server/windows-exe/download"
            $appInstallerUrl = "https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download"
            $osInstallerPath = "$env:USERPROFILE\Downloads\out-windows.exe"
            $appInstallerPath = "$env:USERPROFILE\Downloads\out-windows (1).exe"
            $vscodeInstallerUrl = "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user"
            $vscodeInstallerPath = "$env:USERPROFILE\Downloads\VSCodeSetup.exe"
            function Install-Application($installerUrl, $installerPath, $appName, $silentArgs) {
              Write-Host "$(Get-Date -Format G): Starting download of $appName installer..."
              # Create WebClient object
              $webClient = New-Object System.Net.WebClient
              $progressEvent = Register-ObjectEvent -InputObject $webClient -EventName DownloadProgressChanged -Action {
                $percent = $EventArgs.ProgressPercentage
                Write-Host "$(Get-Date -Format G): Downloading $($using:appName) - $percent% complete"
              }
              # Download file asynchronously
              $webClient.DownloadFileAsync($installerUrl, $installerPath)
              while ($webClient.IsBusy) {
                Start-Sleep -Milliseconds 500
              }
              
              Unregister-Event -SourceIdentifier $progressEvent.Name
              Remove-Job -Name $progressEvent.Name
              Write-Host "$(Get-Date -Format G): $appName installer download complete."
              if (Test-Path $installerPath) {
                Write-Host "$(Get-Date -Format G): Running the $appName installer..."
                Start-Process -FilePath $installerPath -ArgumentList $silentArgs -Wait
                Start-Sleep -Seconds 10
              } else {
                Write-Host "$(Get-Date -Format G): Failed to download the $appName installer."
              }
            }
            Install-Application $osInstallerUrl $osInstallerPath "Pieces OS Server" "/SILENT"
            Install-Application $appInstallerUrl $appInstallerPath "Pieces Application" "/SILENT"
            # Install VS Code with context menu option
            Install-Application $vscodeInstallerUrl $vscodeInstallerPath "Visual Studio Code" "/VERYSILENT /MERGETASKS=!runcode,addcontextmenufiles,addcontextmenufolders"
            Write-Host "$(Get-Date -Format G): Attempting to start the Pieces OS Server..."
            $osServerExePath = "C:\Program Files\Pieces OS\os_server.exe"
            if (Test-Path $osServerExePath) {
              Start-Process -FilePath $osServerExePath -ArgumentList '/SILENT'
              Write-Host "$(Get-Date -Format G): Pieces OS Server started successfully."
            } else {
              Write-Host "$(Get-Date -Format G): Failed to find the Pieces OS Server executable."
            }
            
            Start-Sleep -Seconds 5
            Write-Host "$(Get-Date -Format G): Attempting to start the Pieces application..."
            $piecesExePath = "C:\Program Files\Pieces for Developers\pieces_for_x.exe"
            if (Test-Path $piecesExePath) {
              Start-Process -FilePath $piecesExePath
              Write-Host "$(Get-Date -Format G): Pieces application started successfully."
            } else {
              Write-Host "$(Get-Date -Format G): Failed to find the Pieces application executable."
            }
            # Download and extract the Gist
            $gistUrl = "https://gist.github.com/sirleech/2660189/archive/0b9af3d393b95a84bba812bec3a20eb1832e9d61.zip"
            $gistZipPath = "$env:USERPROFILE\Desktop\gist.zip"
            $gistExtractPath = "$env:USERPROFILE\Desktop\gist"
            Write-Host "$(Get-Date -Format G): Downloading Gist..."
            try {
                Invoke-WebRequest -Uri $gistUrl -OutFile $gistZipPath -ErrorAction Stop
                Write-Host "$(Get-Date -Format G): Gist downloaded successfully."
                
                if (Test-Path $gistZipPath) {
                    Write-Host "$(Get-Date -Format G): Extracting Gist..."
                    Expand-Archive -Path $gistZipPath -DestinationPath $gistExtractPath -Force
                    Write-Host "$(Get-Date -Format G): Gist downloaded and extracted to $gistExtractPath."
                } else {
                    Write-Host "$(Get-Date -Format G): Gist ZIP file not found after download."
                }
            } catch {
                Write-Host "$(Get-Date -Format G): Failed to download Gist. Error: $_"
            }
            # Enable Focus Assist (Do Not Disturb)
            Write-Host "$(Get-Date -Format G): Enabling Focus Assist (Do Not Disturb)..."
            $focusAssistKeyPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings"
            $focusAssistValueName = "NOC_GLOBAL_SETTING_VALUE"
            
            # Set Focus Assist to "Alarms only" (which is like Do Not Disturb)
            Set-ItemProperty -Path $focusAssistKeyPath -Name $focusAssistValueName -Value 1
            
            Write-Host "$(Get-Date -Format G): Focus Assist (Do Not Disturb) enabled."

          create-pr: true
          pr-base: ${{ inputs.base-branch }}
          pr-title: "TestDriver.ai / Generate Test / ${{ matrix.markdown }}"
          pr-branch: testdriver/regression-${{ matrix.markdown }}-${{ github.run_id }}-${{ github.run_attempt }}
          pr-test-filename: ${{matrix.markdown}}.yml
        env:
          FORCE_COLOR: "3"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}