name: TestDriver.ai

permissions:
  actions: write
  contents: write
  statuses: write
  pull-requests: write

on:
  push:
     branches: ["main"]
  workflow_dispatch:

jobs:
  test:
    name: "TestDriver"
    runs-on: ubuntu-latest
    steps:
      - uses: testdriverai/action@main
        with:
          key: ${{ secrets.TESTDRIVER_API_KEY }}
          prompt: |
            1. /run testdriver/onboarding.yml
            2. /run testdriver/onboarding_ltm.yml
            3. /run testdriver/ltm_test.yml
            4. /run testdriver/vsc_test.yml
          prerun: |
            # Define URL variables using environment variables
            $osInstallerUrl = $env:OS_INSTALLER_URL
            $appInstallerUrl = $env:APP_INSTALLER_URL
            $vscodeInstallerUrl = $env:VSC_INSTALLER_URL
            $gistUrl = $env:GIST_URL

            # Download and install Pieces
            $osInstallerPath = "$env:USERPROFILE\Downloads\out-windows.exe"
            $appInstallerPath = "$env:USERPROFILE\Downloads\out-windows (1).exe"
            $vscodeInstallerPath = "$env:USERPROFILE\Downloads\VSCodeSetup.exe"
            function Install-Application($installerUrl, $installerPath, $appName, $silentArgs) {
              Write-Host "$(Get-Date -Format G): Starting download of $appName installer..."
              # Create WebClient object
              $webClient = New-Object System.Net.WebClient
              $progressEvent = Register-ObjectEvent -InputObject $webClient -EventName DownloadProgressChanged -Action {
                $percent = $EventArgs.ProgressPercentage
                Write-Host "$(Get-Date -Format G): Downloading $($using:appName) - $percent% complete"
              }
              # Download file asynchronously
              $webClient.DownloadFileAsync($installerUrl, $installerPath)
              while ($webClient.IsBusy) {
                Start-Sleep -Milliseconds 500
              }
              
              Unregister-Event -SourceIdentifier $progressEvent.Name
              Remove-Job -Name $progressEvent.Name
              Write-Host "$(Get-Date -Format G): $appName installer download complete."
              if (Test-Path $installerPath) {
                Write-Host "$(Get-Date -Format G): Running the $appName installer..."
                Start-Process -FilePath $installerPath -ArgumentList $silentArgs -Wait
                Start-Sleep -Seconds 10
              } else {
                Write-Host "$(Get-Date -Format G): Failed to download the $appName installer."
              }
            }
            Install-Application $osInstallerUrl $osInstallerPath "Pieces OS Server" "/SILENT"
            Install-Application $appInstallerUrl $appInstallerPath "Pieces Application" "/SILENT"
            # Install VS Code with context menu option
            Install-Application $vscodeInstallerUrl $vscodeInstallerPath "Visual Studio Code" "/VERYSILENT /MERGETASKS=!runcode,addcontextmenufiles,addcontextmenufolders"
            Write-Host "$(Get-Date -Format G): Attempting to start the Pieces OS Server..."
            $osServerExePath = "C:\Program Files\Pieces OS\os_server.exe"
            if (Test-Path $osServerExePath) {
              Start-Process -FilePath $osServerExePath -ArgumentList '/SILENT'
              Write-Host "$(Get-Date -Format G): Pieces OS Server started successfully."
            } else {
              Write-Host "$(Get-Date -Format G): Failed to find the Pieces OS Server executable."
            }
            
            Start-Sleep -Seconds 5
            Write-Host "$(Get-Date -Format G): Attempting to start the Pieces application..."
            $piecesExePath = "C:\Program Files\Pieces for Developers\pieces_for_x.exe"
            if (Test-Path $piecesExePath) {
              Start-Process -FilePath $piecesExePath
              Write-Host "$(Get-Date -Format G): Pieces application started successfully."
            } else {
              Write-Host "$(Get-Date -Format G): Failed to find the Pieces application executable."
            }

            # Download and extract the Gist for VSC test to Desktop
            $gistZipPath = "$env:USERPROFILE\Desktop\gist.zip"
            $gistExtractPath = "$env:USERPROFILE\Desktop\gist"
            $pythonFilePath = "$env:USERPROFILE\Desktop\"

            Write-Host "$(Get-Date -Format G): Downloading Gist..."
            try {
                Invoke-WebRequest -Uri $gistUrl -OutFile $gistZipPath -ErrorAction Stop
                Write-Host "$(Get-Date -Format G): Gist downloaded successfully."
                
                if (Test-Path $gistZipPath) {
                    Write-Host "$(Get-Date -Format G): Extracting Gist..."
                    Expand-Archive -Path $gistZipPath -DestinationPath $gistExtractPath -Force
                    
                    # Find the .py file in the extracted folder
                    $pythonFile = Get-ChildItem -Path $gistExtractPath -Filter *.py -Recurse | Select-Object -First 1
                    
                    if ($pythonFile) {
                        # Move the .py file to the desktop
                        Move-Item -Path $pythonFile.FullName -Destination $pythonFilePath -Force
                        Write-Host "$(Get-Date -Format G): Python file extracted to desktop."
                    } else {
                        Write-Host "$(Get-Date -Format G): No Python file found in the Gist."
                    }
                    
                    # Clean up the extracted folder
                    Remove-Item -Path $gistExtractPath -Recurse -Force
                    Write-Host "$(Get-Date -Format G): Cleaned up extracted folder."
                } else {
                    Write-Host "$(Get-Date -Format G): Gist ZIP file not found after download."
                }
            } catch {
                Write-Host "$(Get-Date -Format G): Failed to download Gist. Error: $_"
            }
        env:
          FORCE_COLOR: "3"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OS_INSTALLER_URL: "https://builds.pieces.app/stages/production/os_server/windows-exe/download"
          APP_INSTALLER_URL: "https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download"
          VSC_INSTALLER_URL: "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user"
          GIST_URL: "https://gist.github.com/sirleech/2660189/archive/0b9af3d393b95a84bba812bec3a20eb1832e9d61.zip"

